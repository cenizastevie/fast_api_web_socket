AWSTemplateFormatVersion: '2010-09-09'
Description: >
  FastAPI on ECS Fargate with API Gateway WebSocket + Lambda + DynamoDB connection manager

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select VPC for ECS and Lambda
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for ECS and Lambda
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket where Lambda function code is stored

Resources:

  # DynamoDB Table for storing WebSocket connections
  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebSocketConnections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda with access to DynamoDB and API Gateway Management API
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebSocketLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WebSocketDynamoAndApiGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: !GetAtt WebSocketConnectionsTable.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*

  # Lambda Functions for $connect, $disconnect, sendmessage

  WebSocketConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WebSocketConnectHandler
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')
          table_name = os.environ['TABLE_NAME']

          def lambda_handler(event, context):
              connection_id = event['requestContext']['connectionId']
              dynamodb.put_item(
                  TableName=table_name,
                  Item={'connectionId': {'S': connection_id}}
              )
              return {'statusCode': 200}
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Timeout: 10

  WebSocketDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WebSocketDisconnectHandler
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')
          table_name = os.environ['TABLE_NAME']

          def lambda_handler(event, context):
              connection_id = event['requestContext']['connectionId']
              dynamodb.delete_item(
                  TableName=table_name,
                  Key={'connectionId': {'S': connection_id}}
              )
              return {'statusCode': 200}
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Timeout: 10

  WebSocketSendMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WebSocketSendMessageHandler
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          apigw_management_api = boto3.client('apigatewaymanagementapi', endpoint_url=f"https://{os.environ['APIGW_DOMAIN']}/{os.environ['APIGW_STAGE']}")

          def lambda_handler(event, context):
              connection_id = event['requestContext']['connectionId']
              body = json.loads(event['body'])
              message = body['message']

              apigw_management_api.post_to_connection(
                  ConnectionId=connection_id,
                  Data=message
              )
              return {'statusCode': 200}
      Environment:
        Variables:
          APIGW_DOMAIN: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
          APIGW_STAGE: prod
      Timeout: 10

  # API Gateway WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # API Gateway Routes
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketConnectIntegration}

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketDisconnectIntegration}

  WebSocketSendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketSendMessageIntegration}

  # API Gateway Integrations
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketConnectFunction.Arn}

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketDisconnectFunction.Arn}

  WebSocketSendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketSendMessageFunction.Arn}

  # API Deployment and Stage
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketSendMessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod
      AutoDeploy: true

  # Permission for API Gateway to invoke Lambda
  LambdaInvokePermissionConnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  LambdaInvokePermissionDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  LambdaInvokePermissionSendMessage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketSendMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/sendmessage

  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: fastapi-websocket-cluster

  # ECS Task Execution Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: fastapi-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ApiGatewayManagementApiAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*

  # ECS Task Definition
  FastApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fastapi-websocket-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: fastapi
          Image: !Sub "${FastApiRepositoryUri}:latest" # Use the ECR repository URI from ecr_task.yaml output
          PortMappings:
            - ContainerPort: 8000
          Environment:
            - Name: APIGW_DOMAIN
              Value: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
            - Name: APIGW_STAGE
              Value: prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/fastapi-websocket
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fastapi

  # ECS Service
  FastApiService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1

